<label for="vmaInput1">Entrez votre VMA (km/h) :</label>
<input type="number" id="vmaInput1" value="15" step="0.1">

<label for="levelSelect" style="margin-left: 0px;">Niveau d'endurance :</label>
<select id="levelSelect" onchange="syncInputs(input1, input2)">
  <option value="debutant">1 (débutant)</option>
  <option value="intermediaire" selected>2</option>
  <option value="bon">3</option>
  <option value="avance">4</option>
  <option value="elite">5 (élite)</option>
</select>

<table style="margin-top: 10px; border-collapse: collapse; width: 80%; text-align: center; font-family: sans-serif;">
  <thead>
    <tr style="background-color: #f0f0f0;">
      <th style="border: 1px solid #ccc; padding: 6px;">Course</th>
      <th style="border: 1px solid #ccc; padding: 6px;">Vitesse estimée<br>(km/h)</th>
      <th style="border: 1px solid #ccc; padding: 6px;">Allure estimée<br>(min/km)</th>
      <th style="border: 1px solid #ccc; padding: 6px;">Temps estimé total</th>
    </tr>
  </thead>
  <tbody id="resultsBody">
    <!-- Lignes générées dynamiquement -->
  </tbody>
</table>

<script>
const enduranceLevels = {
  debutant:      { t_VMA: 4,  p_60: 78.5 },
  intermediaire: { t_VMA: 5,  p_60: 81 },
  bon:           { t_VMA: 6,  p_60: 83.5 },
  avance:        { t_VMA: 7,  p_60: 86 },
  elite:         { t_VMA: 8,  p_60: 88.5 }
};

const distances = {
  "5 km": 5,
  "10 km": 10,
  "Semi-marathon": 21.097,
  "Marathon": 42.195
};

function computeSpeed(VMA, d, t_VMA, p_60) {
  const alpha = Math.log(p_60 / 100);
  const beta = -alpha / Math.log(t_VMA / 60);
  return Math.exp((alpha + beta * Math.log(d) + Math.log(VMA)) / (1 + beta));
}

function speedToPace(speed) {
  const pace = 60 / speed;
  let min = Math.floor(pace);
  let sec = Math.round((pace - min) * 60);
  if (sec === 60) {
    sec = 0;
    min += 1;
  }
  return `${min}:${sec.toString().padStart(2, '0')}`;
}

function timeFromSpeed(distance, speed) {
  const totalMinutes = (distance / speed) * 60;
  let h = Math.floor(totalMinutes / 60);
  let m = Math.floor(totalMinutes % 60);
  let s = Math.round((totalMinutes - h * 60 - m) * 60);
  if (s === 60) {
    s = 0;
    m += 1;
    if (m === 60) {
      m = 0;
      h += 1;
    }
  }

  const mm = m.toString().padStart(2, '0');
  const ss = s.toString().padStart(2, '0');

  if (h === 0) {
    return `${mm}:${ss}`;
  } else {
    return `${h}:${mm}:${ss}`;
  }
}

function updateTable(vma) {
  const level = document.getElementById("levelSelect").value;
  const { t_VMA, p_60 } = enduranceLevels[level];

  const tbody = document.getElementById("resultsBody");
  tbody.innerHTML = "";

  for (const [label, d] of Object.entries(distances)) {
    const vitesse = computeSpeed(vma, d, t_VMA, p_60);
    const allure = speedToPace(vitesse);
    const temps = timeFromSpeed(d, vitesse);

    const row = `<tr>
                   <td style="border: 1px solid #ccc; padding: 6px;">${label}</td>
                   <td style="border: 1px solid #ccc; padding: 6px;">${vitesse.toFixed(2)}</td>
                   <td style="border: 1px solid #ccc; padding: 6px;">${allure}</td>
                   <td style="border: 1px solid #ccc; padding: 6px;">${temps}</td>
                 </tr>`;
    tbody.insertAdjacentHTML("beforeend", row);
  }
}
</script>



<label for="vmaInput2">Entrez votre VMA (km/h) :</label>
<input type="number" id="vmaInput2" value="15" step="0.1">

<table style="margin-top: 10px; border-collapse: collapse; width: 80%; text-align: center; font-family: sans-serif;">
  <thead>
    <tr style="background-color: #f0f0f0;">
      <th style="border: 1px solid #ccc; padding: 6px;">Distance</th>
      <th style="border: 1px solid #ccc; padding: 6px;">% de la VMA</th>
      <th style="border: 1px solid #ccc; padding: 6px;">Chrono</th>
      <th style="border: 1px solid #ccc; padding: 6px;">Allure (min/km)</th>
    </tr>
  </thead>
  <tbody id="vmaResultsBody">
    <!-- Rempli dynamiquement -->
  </tbody>
</table>

<script>
const vmaEfforts = [
  { distance: 0.200, pourcent: 105 },
  { distance: 0.300, pourcent: 102 },
  { distance: 0.400, pourcent: 100 },
  { distance: 0.500, pourcent: 98 },
  { distance: 1.000, pourcent: 92 }
];

function timeFromSpeedVMA(distance, speed) {
  const totalMinutes = (distance / speed) * 60;
  let m = Math.floor(totalMinutes % 60);
  let s = Math.round((totalMinutes - m) * 60);

  if (s === 60) {
    s = 0;
    m += 1;
  }

  if (m === 0) {
    return `${s} sec`;
  } else {
    return `${m} min ${s} sec`;
  }
}

function updateVmaTable(vma) {
  const tbody = document.getElementById("vmaResultsBody");
  tbody.innerHTML = "";

  vmaEfforts.forEach(({ distance, pourcent }) => {
    const speed = vma * (pourcent / 100);
    const pace = speedToPace(speed);
    const time = timeFromSpeedVMA(distance, speed);

    const row = `<tr>
                   <td style="border: 1px solid #ccc; padding: 6px;">${(distance * 1000).toFixed(0)} m</td>
                   <td style="border: 1px solid #ccc; padding: 6px;">${pourcent}%</td>
                   <td style="border: 1px solid #ccc; padding: 6px;">${time}</td>
                   <td style="border: 1px solid #ccc; padding: 6px;">${pace}</td>
                 </tr>`;
    tbody.insertAdjacentHTML("beforeend", row);
  });
}
</script>



<script>
const input1 = document.getElementById('vmaInput1');
const input2 = document.getElementById('vmaInput2');

function syncInputs(source, target) {
  if (target.value !== source.value) {
    target.value = source.value;
  }
  const vmaValue = parseFloat(source.value);
  if (!isNaN(vmaValue)) {
    updateTable(vmaValue);
    updateVmaTable(vmaValue);
  }
}

input1.addEventListener('input', () => syncInputs(input1, input2));
input2.addEventListener('input', () => syncInputs(input2, input1));

// Initialisation au chargement
syncInputs(input1, input2);
</script>
